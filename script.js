// Generated by CoffeeScript 2.7.0
(function() {
  var by_id, by_id_set, by_id_value, calculate, chalk, field, fields, fields_all, fn, hash_get, hash_set, j, last_changed, len, onchange, result_show, values_default,
    indexOf = [].indexOf;

  values_default = {
    min: 300,
    total: 1500
  };

  chalk = function(v, class_name) {
    return `<span class='${class_name}'>${v}</span>`;
  };

  hash_get = function(param) {
    var result;
    result = window.location.hash.match(new RegExp("(\\?|&|#)" + param + "(\\[\\])?=([^&]*)"));
    if (result) {
      return parseFloat(decodeURIComponent(result[3]));
    }
    return false;
  };

  hash_set = function(ob) {
    return window.location.hash = Object.keys(ob).reduce(function(acc, field) {
      var def;
      for (def in values_default) {
        if (field === def && parseFloat(ob[field]) === values_default[field]) {
          return acc;
        }
      }
      return acc.concat([`${field}=${ob[field]}`]);
    }, []).join('&');
  };

  fn = function({total, bruto, neto, min}) {
    var calculate, iin_params, r, round, tax_iin, tax_iin_total, tax_risk, tax_sia, tax_vsaoi;
    round = function(v) {
      return Math.round(v * 100) * 0.01;
    };
    r = function(v, color = 1) {
      return chalk(v.toFixed(2), color === 2 ? 'legit' : color === 3 ? 'high1' : 'warn');
    };
    tax_risk = 0.36;
    calculate = function({total, bruto, neto}) {
      var iin_params, tax_iin, tax_iin_total, tax_sia, tax_vsaoi;
      if (total) {
        bruto = (total - tax_risk) / 1.2359;
      }
      tax_sia = bruto * 0.2359;
      tax_vsaoi = bruto * 0.1050;
      iin_params = [[min + tax_vsaoi, 0.2], [20004 / 12, 0.23], [78100 / 12, 0.31]];
      tax_iin = iin_params.map(function(threshold, i, arr) {
        if (bruto > threshold[0]) {
          return (bruto - threshold[0]) * (threshold[1] - (i > 0 ? arr[i - 1][1] : 0));
        }
        if (i === 0) {
          return 0;
        }
        return null;
      }).filter(function(v) {
        return v !== null;
      });
      tax_iin_total = tax_iin.reduce((function(a, b) {
        return a + b;
      }), 0);
      neto = round(bruto - tax_vsaoi - tax_iin_total);
      return {neto, bruto, total, tax_sia, tax_vsaoi, iin_params, tax_iin, tax_iin_total};
    };
    if (neto) {
      (() => {
        var i, j, neto_new, results, total_cal, total_cal_prev;
        total_cal = neto * 1.7;
        results = [];
        for (i = j = 0; j <= 5000; i = ++j) {
          total_cal_prev = total_cal;
          neto_new = calculate({
            total: total_cal
          }).neto;
          total_cal += neto - neto_new;
          if (total_cal_prev === total_cal) {
            total = total_cal;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      })();
    }
    ({neto, bruto, total, tax_sia, tax_vsaoi, iin_params, tax_iin, tax_iin_total} = calculate({total, bruto}));
    return {
      neto,
      min,
      bruto,
      total: bruto + tax_sia + tax_risk,
      str: `total: ${r(bruto + tax_sia + tax_risk, 3)} = ${r(bruto)} (bruto) + ${r(tax_sia)} (vsaoi) + ${tax_risk} (riska nodeva)
bruto: ${r(bruto, 2)}
neto: ${r(neto, 3)}
IIN: ${r(tax_iin_total)} = ${tax_iin.map(function(amount, i) {
        return `${r(amount)} (no ${Math.round(iin_params[i][0] * 1000) / 1000}${i === 0 ? ` (neapliekamais minimums (${min}) + vsaoi (${Math.round(tax_vsaoi * 1000) / 1000}))` : ''} * ${iin_params[i][1]})`;
      }).join(" + ")}
VASAOI: ${r(tax_sia + tax_vsaoi)} = ${r(tax_sia)} (darba devēja daļa) + ${r(tax_vsaoi)} (darba ņēmēja daļa)
taxes: ${r(tax_sia + tax_vsaoi + tax_risk + tax_iin_total, 3)}`
    };
  };

  by_id = function(field) {
    return document.getElementById(field);
  };

  by_id_value = function(field) {
    return parseFloat(by_id(field).value || 0);
  };

  by_id_set = function(field, value) {
    return by_id(field).value = value.toFixed(2);
  };

  result_show = function(v) {
    return by_id('result').innerHTML = v;
  };

  fields = ['total', 'bruto', 'neto'];

  fields_all = fields.concat(['min']);

  calculate = function(field_change, update = true, escaped = []) {
    var field_change_new, result;
    if (fields.filter(function(field) {
      return by_id_value(field) > 0;
    }).length === 0) {
      return result(chalk('Ievadiet vismaz vienu no algas cipariem!', 'error'));
    }
    if (by_id_value(field_change) === 0) {
      if (escaped.length <= 2) {
        field_change_new = fields.filter(function(f) {
          return !(f === field_change || indexOf.call(escaped, f) >= 0);
        })[0];
        return calculate(field_change_new, update, escaped.concat([field_change]));
      }
      return result(chalk('Kaut kas nav labi.', 'error'));
    }
    result = fn(['min', field_change].reduce(function(acc, field) {
      return Object.assign(acc, {
        [field]: by_id_value(field)
      });
    }, {}));
    fields.filter(function(field2) {
      return field2 !== field_change;
    }).forEach(function(field2) {
      return by_id(field2).value = result[field2].toFixed(2);
    });
    if (update) {
      hash_set({
        min: result['min'].toFixed(2),
        [field_change]: result[field_change].toFixed(2)
      });
    }
    return result_show(result.str.split("\n").join("<br />"));
  };

  last_changed = null;

  onchange = function(field) {
    if (field !== 'min' && by_id_value(field) <= 0) {
      return;
    }
    if (field !== 'min' && by_id_value(field) > 0) {
      last_changed = field;
    }
    return calculate(field === 'min' ? last_changed || 'total' : field);
  };

  fields_all.forEach(function(field) {
    by_id(field).onkeyup = function() {
      return onchange(field);
    };
    return by_id(field).onchange = function() {
      return onchange(field);
    };
  });

  by_id_set('min', hash_get('min') === false ? values_default['min'] : hash_get('min'));

  for (j = 0, len = fields.length; j < len; j++) {
    field = fields[j];
    if (hash_get(field)) {
      by_id_set(field, hash_get(field));
      calculate(field);
      return;
    }
  }

  by_id_set('total', values_default['total']);

  calculate('total');

}).call(this);
